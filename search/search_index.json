{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ionscale","text":"<p>Note: ionscale is currently beta quality, actively being developed and so subject to changes</p> <p>What is Tailscale?</p> <p>Tailscale is a VPN service that makes the devices and applications you own accessible anywhere in the world, securely and effortlessly. It enables encrypted point-to-point connections using the open source WireGuard protocol, which means only devices on your private network can communicate with each other.</p> <p>What is ionscale?</p> <p>While the Tailscale software running on each node is open source, their centralized \"coordination server\" which act as a shared drop box for public keys is not.</p> <p>ionscale aims to implement such lightweight, open source alternative Tailscale control server.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>multi tailnet support</li> <li>multi user support</li> <li>OIDC integration (not required, although recommended)</li> <li>Auth keys</li> <li>Access control list</li> <li>DNS<ul> <li>nameservers</li> <li>Split DNS</li> <li>MagicDNS</li> </ul> </li> <li>HTTPS Certs</li> <li>Tailscale SSH</li> <li>Service collection</li> <li>Taildrop</li> </ul>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is not an official Tailscale or Tailscale Inc. project.</p>"},{"location":"configuration/reference/","title":"Configuration Reference","text":"<p>ionscale uses the YAML file format for configuration.  A full configuration reference file is shown below, this provides comments and all available options.</p> <pre><code># The HTTP(S) listen address to serve the control plane.\nlisten_addr: \":8080\"\n\n# The STUN listen address when using the embedded DERP.\nstun_listen_addr: \":3478\"\n\n# The address to bind to for the metrics.\nmetrics_listen_addr: \":9091\"\n\n# The DNS name of the server HTTP(S) endpoint as accessible by clients and the CLI.\npublic_addr: \"ionscale.example.com:443\"\n\n# The DNS name of the STUN endpoint as accessible by clients.\nstun_public_addr: \"ionscale.example.com:3478\"\n\ntls:\n  # Disable TLS (not recommended)\n  # Use this flag to disable TLS e.g. when running behind a reverse proxy\n  disable: false\n  # Redirect HTTP requests to HTTPS requests\n  force_https: true\n  # The path to the certificate for TLS.\n  # Required when TLS is enabled and ACME disabled\n  cert_file: \"\"\n  # The path to the private key for the certificate.\n  # Required when TLS is enabled and ACME disabled\n  key_file: \"\"\n  # Enable automatic TLS certificates provisioning with Let's Encrypt\n  acme: false\n  # An email address, used when creating an ACME account and keeping you up-to-date regarding your certificates\n  acme_email: \"\"\n  # The URL to the ACME CA's directory.\n  acme_ca: \"https://acme-v02.api.letsencrypt.org/directory\"\n  # Path to store certificates and metadata needed by ACME\n  acme_path: \"./data\"\n\ndatabase:\n  # Type of databas to use, supported values are sqlite or postgres\n  type: \"sqlite\"\n  # The URL for connecting to the database\n  # e.g\n  # url: \"/data/ionscale.db?_pragma=busy_timeout(5000)&amp;_pragma=journal_mode(WAL)\"\n  # url: \"postgres://ionscale:ionscale@localhost/ionscale?sslmode=disable\"\n  url: \"./ionscale.db\"\n\nderp:\n  server:\n    disabled:     false\n    region_id:    1000\n    region_code:  \"ionscale\"\n    region_name:  \"ionscale Embedded DERP\"\n  sources:\n    - https://controlplane.tailscale.com/derpmap/default\n\nkeys:\n  # A private, 32 bytes in hex, system admin key\n  # Use this key with the CLI when configuring system-wide resources like tailnets\n  # A key can be generated by:\n  # - ionscale genkey\n  # - openssl rand -hex 32\n  system_admin_key: \"\"\n\npoll_net:\n  # Period to send keep alive messages to the connected devices\n  keep_alive_interval: \"60s\"\n\n# Optional authentication configuration\nauth:\n  # OIDC provider configuration\n  provider:\n    # OIDC issuer URL where ionscale can find the OpenID Provider Configuration Document\n    issuer: \"\"\n    # OIDC client id and secrets\n    client_id: \"\"\n    client_secret: \"\"\n    # additional OIDC scopes used in the OIDC flow\n    additional_scopes: \"\"\n  # IAM policy to mark some authenticated users as System Admin\n  system_admins:\n    # A list of emails of users that are System Admin\n    emails: []\n    # A list of ID (sub OIDC claim) of users that are System Admin\n    subs: []\n    # A list of BEXPR filters to mark authenticated users as System Admin\n    filters: []\n\ndns:\n  # The base domain of the MagicDNS FQDN hostnames\n  magic_dns_suffix: \"ionscale.net\"\n  # A DNS provider for setting public TXT records\n  # This is a requirement to enable Tailscale HTTPS certs.\n  provider:\n    # name of your provider, currently supported implementations:\n    # - azure (https://github.com/libdns/azure)\n    # - cloudflare (https://github.com/libdns/cloudflare)\n    # - digitialocean (https://github.com/libdns/digitalocean)\n    # - googleclouddns (https://github.com/libdns/googleclouddns)\n    # - route53 (https://github.com/libdns/route53)\n    name: \"\"\n    # DNS zone\n    zone: \"\"\n    # Provider specific configuration\n    config: {}\n\nlogging:\n  # Output formatting for logs: text or json\n  format: \"text\"\n  level: \"info\"\n  # Path of a target log file, if omitted logs are written to stdout\n  file: \"\"\n</code></pre>"},{"location":"getting-started/docker/","title":"Getting started with Docker","text":"<p>You can install and run ionscale using the Docker images published on GitHub Container Registry.</p>"},{"location":"getting-started/docker/#requirements","title":"Requirements","text":"<ul> <li>A Linux machine with port 443 and 3478 open to ingress traffic.</li> <li>Docker installed. See the official installation documentation</li> <li>A registered domain name.</li> </ul>"},{"location":"getting-started/docker/#step-1-configure-dns","title":"Step 1. Configure DNS","text":"<p>Set up a <code>A</code> DNS records: <code>ionscale.example.com</code> (We are assuming that your domain name is example.com.)</p> <p>Tip</p> <p>You can use <code>dig</code> to make sure that DNS records are propagated:</p> <pre><code>$ dig ionscale.example.com\n</code></pre>"},{"location":"getting-started/docker/#step-2-run-ionscale-with-docker","title":"Step 2. Run ionscale with Docker","text":""},{"location":"getting-started/docker/#configure-ionscale","title":"Configure ionscale","text":"<pre><code>mkdir -p ionscale/data\ncd ./ionscale\n</code></pre> <p>Generate a configuration file for ionscale with the following commands:</p> <pre><code>export IONSCALE_ACME_EMAIL=&lt;your email&gt;\nexport IONSCALE_DOMAIN=ionscale.example.com\nexport IONSCALE_SYSTEM_ADMIN_KEY=$(docker run ghcr.io/jsiebens/ionscale:0.15.0 genkey -n)\n</code></pre> <pre><code>tee ./config.yaml &gt;/dev/null &lt;&lt;EOF\nlisten_addr: \":443\"\npublic_addr: \"${IONSCALE_DOMAIN}:443\"\nstun_public_addr: \"${IONSCALE_DOMAIN}:3478\"\n\ntls:\n  acme: true\n  acme_email: \"${IONSCALE_ACME_EMAIL}\"\n\nkeys:\n  system_admin_key: \"${IONSCALE_SYSTEM_ADMIN_KEY}\"\n\ndatabase:\n  url: \"/data/ionscale.db?_pragma=busy_timeout(5000)&amp;_pragma=journal_mode(WAL)\"\n\nlogging:\n  level: info\nEOF\n</code></pre>"},{"location":"getting-started/docker/#start-ionscale","title":"Start ionscale","text":"<p>Run an ionscale instance with the following command:</p> <pre><code>docker run \\\n  -v $(pwd)/config.yaml:/etc/ionscale/config.yaml \\\n  -v $(pwd)/data:/data \\\n  -p 443:443 \\\n  -p 3478:3478/udp \\\n  ghcr.io/jsiebens/ionscale:0.15.0 server --config /etc/ionscale/config.yaml\n</code></pre>"},{"location":"getting-started/manual/","title":"Getting started on a Linux Server","text":"<p>This tutorial will guide you through the steps needed to install and run ionscale on a Linux machine.</p>"},{"location":"getting-started/manual/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Linux machine with port 443 and 3478 open to ingress traffic.</li> <li>A registered domain name.</li> </ul>"},{"location":"getting-started/manual/#step-1-configure-dns","title":"Step 1. Configure DNS","text":"<p>Set up a <code>A</code> DNS records: <code>ionscale.example.com</code> (We are assuming that your domain name is example.com.)</p> <p>Tip</p> <p>You can use <code>dig</code> to make sure that DNS records are propagated:</p> <pre><code>$ dig ionscale.example.com\n</code></pre>"},{"location":"getting-started/manual/#step-2-set-up-ionscale-on-your-linux-host","title":"Step 2. Set up ionscale on your Linux host","text":""},{"location":"getting-started/manual/#prepare-installation","title":"Prepare installation","text":"<p>Run the following commands to prepare the installation:</p> <pre><code>sudo mkdir -p /etc/ionscale\nsudo mkdir -p /var/lib/ionscale\n\nsudo useradd --system --no-create-home --shell /bin/false ionscale\nsudo chown ionscale:ionscale /etc/ionscale\nsudo chown ionscale:ionscale /var/lib/ionscale\n</code></pre>"},{"location":"getting-started/manual/#install-ionscale","title":"Install ionscale","text":"<p>Run the following commands to install the ionscale binary on your Linux host:</p> <pre><code>sudo curl \\\n    -o \"/usr/local/bin/ionscale\" \\\n    -sfL \"https://github.com/jsiebens/ionscale/releases/download/v0.15.0/ionscale_linux_amd64\"\n\nsudo chmod +x \"/usr/local/bin/ionscale\"\n</code></pre>"},{"location":"getting-started/manual/#configure-ionscale","title":"Configure ionscale","text":"<p>Generate a system admin key for ionscale using the <code>ionscale genkey</code> command and write it the an environment file:</p> <pre><code>sudo tee /etc/default/ionscale &gt;/dev/null &lt;&lt;EOF\nIONSCALE_KEYS_SYSTEM_ADMIN_KEY=$(ionscale genkey -n)\nEOF\n</code></pre> <p>Generate a configuration file for ionscale with the following commands:</p> <pre><code>export IONSCALE_ACME_EMAIL=&lt;your email&gt;\nexport IONSCALE_DOMAIN=ionscale.example.com\n</code></pre> <pre><code>sudo tee /etc/ionscale/config.yaml &gt;/dev/null &lt;&lt;EOF\nlisten_addr: \":443\"\npublic_addr: \"${IONSCALE_DOMAIN}:443\"\nstun_public_addr: \"${IONSCALE_DOMAIN}:3478\"\n\ntls:\n  acme: true\n  acme_email: \"${IONSCALE_ACME_EMAIL}\"\n\ndatabase:\n  url: \"/var/lib/ionscale/ionscale.db?_pragma=busy_timeout(5000)&amp;_pragma=journal_mode(WAL)\"\n\nlogging:\n  level: info\nEOF\n</code></pre> <p>Create a systemd service file for ionscale with the following commands:</p> <pre><code>sudo tee /etc/systemd/system/ionscale.service &gt;/dev/null &lt;&lt;EOF\n[Unit]\nDescription=ionscale - a Tailscale Controller server\nRequires=network-online.target\nAfter=network.target\n\n[Service]\nEnvironmentFile=/etc/default/ionscale\nUser=ionscale\nGroup=ionscale\nExecStart=/usr/local/bin/ionscale server --config /etc/ionscale/config.yaml\nRestart=on-failure\nRestartSec=10s\nAmbientCapabilities=CAP_NET_BIND_SERVICE\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre>"},{"location":"getting-started/manual/#start-ionscale","title":"Start ionscale","text":"<p>On your Linux machine, run the following commands to enable and start the ionscale daemon:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable ionscale\nsudo systemctl start ionscale\n</code></pre>"}]}